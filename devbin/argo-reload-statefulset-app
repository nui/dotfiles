#!/bin/zsh

set -e

if [[ $# -lt 1 ]]; then
    print "Usage: $0 argo-app-name [argocd-app-set-args..]"
    exit 1
fi

app_name=$1
shift 1

if ! argocd app get $app_name >/dev/null 2>&1; then
    print "app $app_name doesn't exist or need to relogin"
    exit 1
fi

manifests=$(argocd app manifests $app_name)


if [ -z "$manifests" ]; then
    print "can't find manifests"
    exit 1
fi

expr=(
    'select(.kind == "StatefulSet")'
    '.metadata.namespace'
)
namespace=$(echo -E $manifests | yq ${(j:|:)expr})

if [ -z "$namespace" ]; then
    print "can't find namespace"
    exit 1
fi

expr=(
    'select(.kind == "StatefulSet")'
    '.metadata.labels'
    'pick(["app.kubernetes.io/instance","app.kubernetes.io/name"])'
    'to_entries'
    'map(.key + "=" + .value)'
    'join(",")'
)
app_labels=$(echo -E $manifests | yq ${(j:|:)expr})

if [ -z "$app_labels" ]; then
    print "can't find app_labels"
    exit 1
fi

set -x

# scale statefulset replicas to 0
argocd app patch-resource $app_name \
    --kind StatefulSet \
    --patch '{"spec":{"replicas": 0}}'

# wait for pod deletion
kubectl -n $namespace wait \
    --for=delete \
    --timeout=180s \
    -l $app_labels \
    pods

argocd app get $app_name --refresh

if [ $# -gt 0 ]; then
    argocd app set $app_name $@
fi

argocd app sync --prune $app_name
argocd app wait $app_name

