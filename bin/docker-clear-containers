#!/usr/bin/python

import argparse
import datetime
import getpass
import grp
import json
import os
import re
import socket
import subprocess
import sys


GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
RESET = '\033[0m'

NEED_SUDO = True


def init():
    global NEED_SUDO
    user = getpass.getuser()
    if user == 'root' or user in grp.getgrnam('docker').gr_mem:
        NEED_SUDO = False


def build_docker_args(args):
    cmd = ('docker',) + args
    if NEED_SUDO:
        cmd = ('sudo',) + cmd
    return cmd


def get_docker_generated_name_set():
    left = {
        "admiring",
        "adoring",
        "affectionate",
        "agitated",
        "amazing",
        "angry",
        "awesome",
        "blissful",
        "boring",
        "brave",
        "clever",
        "cocky",
        "compassionate",
        "competent",
        "condescending",
        "confident",
        "cranky",
        "dazzling",
        "determined",
        "distracted",
        "dreamy",
        "eager",
        "ecstatic",
        "elastic",
        "elated",
        "elegant",
        "eloquent",
        "epic",
        "fervent",
        "festive",
        "flamboyant",
        "focused",
        "friendly",
        "frosty",
        "gallant",
        "gifted",
        "goofy",
        "gracious",
        "happy",
        "hardcore",
        "heuristic",
        "hopeful",
        "hungry",
        "infallible",
        "inspiring",
        "jolly",
        "jovial",
        "keen",
        "kind",
        "laughing",
        "loving",
        "lucid",
        "modest",
        "musing",
        "mystifying",
        "naughty",
        "nervous",
        "nifty",
        "nostalgic",
        "objective",
        "optimistic",
        "peaceful",
        "pedantic",
        "pensive",
        "practical",
        "priceless",
        "quirky",
        "quizzical",
        "relaxed",
        "reverent",
        "romantic",
        "sad",
        "serene",
        "sharp",
        "silly",
        "sleepy",
        "stoic",
        "stupefied",
        "suspicious",
        "tender",
        "thirsty",
        "trusting",
        "unruffled",
        "upbeat",
        "vibrant",
        "vigilant",
        "vigorous",
        "wizardly",
        "wonderful",
        "xenodochial",
        "youthful",
        "zealous",
        "zen",
    }
    right = {
        "agnesi",
        "albattani",
        "allen",
        "almeida",
        "archimedes",
        "ardinghelli",
        "aryabhata",
        "austin",
        "babbage",
        "banach",
        "bardeen",
        "bartik",
        "bassi",
        "beaver",
        "bell",
        "benz",
        "bhabha",
        "bhaskara",
        "blackwell",
        "bohr",
        "booth",
        "borg",
        "bose",
        "boyd",
        "brahmagupta",
        "brattain",
        "brown",
        "carson",
        "chandrasekhar",
        "clarke",
        "colden",
        "cori",
        "cray",
        "curie",
        "curran",
        "darwin",
        "davinci",
        "dijkstra",
        "dubinsky",
        "easley",
        "edison",
        "einstein",
        "elion",
        "engelbart",
        "euclid",
        "euler",
        "fermat",
        "fermi",
        "feynman",
        "franklin",
        "galileo",
        "gates",
        "goldberg",
        "goldstine",
        "goldwasser",
        "golick",
        "goodall",
        "haibt",
        "hamilton",
        "hawking",
        "heisenberg",
        "hermann",
        "heyrovsky",
        "hodgkin",
        "hoover",
        "hopper",
        "hugle",
        "hypatia",
        "jackson",
        "jang",
        "jennings",
        "jepsen",
        "johnson",
        "joliot",
        "jones",
        "kalam",
        "kare",
        "keller",
        "kepler",
        "khorana",
        "kilby",
        "kirch",
        "knuth",
        "kowalevski",
        "lalande",
        "lamarr",
        "lamport",
        "leakey",
        "leavitt",
        "lewin",
        "lichterman",
        "liskov",
        "lovelace",
        "lumiere",
        "mahavira",
        "mayer",
        "mccarthy",
        "mcclintock",
        "mclean",
        "mcnulty",
        "meitner",
        "meninsky",
        "mestorf",
        "minsky",
        "mirzakhani",
        "montalcini",
        "morse",
        "murdock",
        "neumann",
        "newton",
        "nightingale",
        "nobel",
        "noether",
        "northcutt",
        "noyce",
        "panini",
        "pare",
        "pasteur",
        "payne",
        "perlman",
        "pike",
        "poincare",
        "poitras",
        "ptolemy",
        "raman",
        "ramanujan",
        "ride",
        "ritchie",
        "roentgen",
        "rosalind",
        "saha",
        "sammet",
        "shannon",
        "shaw",
        "shirley",
        "shockley",
        "sinoussi",
        "snyder",
        "spence",
        "stallman",
        "stonebraker",
        "swanson",
        "swartz",
        "swirles",
        "tesla",
        "thompson",
        "torvalds",
        "turing",
        "varahamihira",
        "visvesvaraya",
        "volhard",
        "wescoff",
        "wiles",
        "williams",
        "wilson",
        "wing",
        "wozniak",
        "wright",
        "yalow",
        "yonath",
    }
    return left.union(right)


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--days', default=7, type=int,
                        help='assume junk container if number of days since created less than this value, default is 7')
    args = parser.parse_args()
    return args


def list_all_container_ids():
    args = build_docker_args(('ps', '-a', '-q', '--no-trunc'))
    return filter(None, subprocess.check_output(args).decode().split('\n'))


def get_container_info(id):
    '''
    :param id: container id
    :return: dict contains container info
    '''
    args = build_docker_args(('inspect', id))
    output = subprocess.check_output(args).decode()
    return json.loads(output)[0]


def docker_timestamp_to_datetime(ts):
    dt, _, tail = ts.partition('.')
    us = re.match(r'(\d*)Z', tail).groups()[0]
    # limit microsecond to 6 decimal points
    ts = dt + _ + us[:6] + 'Z'
    return datetime.datetime.strptime(ts, r'%Y-%m-%dT%H:%M:%S.%fZ')


def remove_container(name):
    null = open(os.devnull, 'w')
    exit_status = subprocess.call(build_docker_args(('rm', name)),
                                  stdout=null,
                                  stderr=subprocess.STDOUT)
    if exit_status == 0:
        print GREEN + 'Removed' + RESET, name
    else:
        print 'Failed', name


class Container(object):
    NAME_SET = get_docker_generated_name_set()

    _ATTRIBUTE_MAPPING = (
        ('id', 'Id'),
        ('name', lambda x: x['Name'].lstrip('/')),
        ('running', lambda x: x['State']['Running']),
        ('created', lambda x: docker_timestamp_to_datetime(x['Created'])),
        ('tty', lambda x: x['Config']['Tty']),
        ('stdin_once', lambda x: x['Config']['StdinOnce']),
    )

    def __init__(self, id, junk_days):
        self._info = info = get_container_info(id)
        self.junk_days = junk_days
        for attr, tmp in self._ATTRIBUTE_MAPPING:
            if hasattr(tmp, '__call__'):
                value = tmp.__call__(info)
            else:
                value = info.get(tmp)
            self.__setattr__(attr, value)

    @property
    def generated_name(self):
        return self.is_generated_name(self.name)

    def is_generated_name(self, name):
        if name.find('_') > 0:
            left, right = name.split('_', 1)
            return left in self.NAME_SET and right in self.NAME_SET
        return False

    @property
    def time_since_created(self):
        return datetime.datetime.utcnow() - self.created

    def is_junk(self):
        delta = datetime.timedelta(days=self.junk_days)
        return (not self.running) and self.generated_name and self.time_since_created < delta


def confirm_host():
    if os.environ.get('NMK_DEVELOPMENT') != 'true':
        print 'Hostname : ', GREEN + socket.gethostname() + RESET
        ch = raw_input('This is probably remote machine, Do you want to continue ? [y/N] ') or 'N'
        if ch.upper() != 'Y':
            sys.exit(1)


def list_junk_container(days):
    junk_set = set()
    for id in list_all_container_ids():
        c = Container(id, junk_days=days)
        if c.is_junk():
            junk_set.add(c)
    junks = sorted(junk_set, key=lambda x: x.time_since_created)
    return junks


def main():
    args = parse_arguments()
    confirm_host()
    junks = list_junk_container(days=args.days)
    if len(junks) > 0:
        print 'time since created | container name'
        print '-----------------------------------'
        for c in junks:
            print '  {}   | {}'.format(c.time_since_created, c.name)
        print '-----------------------------------'
        ch = raw_input('Delete {} junk containers ? [Y/n] : '.format(len(junks))) or 'Y'
        if ch.upper() == 'Y':
            for c in junks:
                remove_container(c.name)
    else:
        print 'There is no junk container'


if __name__ == '__main__':
    init()
    main()
